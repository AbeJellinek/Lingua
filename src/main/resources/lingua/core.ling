// ==== Intrinsics pt. 1 ==== //
// ======= Primitives ======= //

var Obj      =  native("me.abje.lingua.interpreter.obj.Obj")
var Boolean  =  native("me.abje.lingua.interpreter.obj.BooleanObj")
var Char     =  native("me.abje.lingua.interpreter.obj.CharObj")
var Class    =  native("me.abje.lingua.interpreter.obj.ClassObj")
var Function =  native("me.abje.lingua.interpreter.obj.FunctionObj")
var List     =  native("me.abje.lingua.interpreter.obj.ListObj")
var Map      =  native("me.abje.lingua.interpreter.obj.MapObj")
var Number   =  native("me.abje.lingua.interpreter.obj.NumberObj")
var String   =  native("me.abje.lingua.interpreter.obj.StringObj")
var Tuple    =  native("me.abje.lingua.interpreter.obj.TupleObj")

// ==== Intrinsics pt. 2 ==== //
// ======= Exceptions ======= //

class Exception {
    message
    stack = dumpStack()

    init(message) = {
        self.message = message
    }

    printError() = {
        error(classOf(self) + ": " + self.message)
        self.stack.map(x -> "  at " + x).forEach(error)
    }
}

class UndefinedException : Exception {
    init(message) = super.init(message)
}

class NullReferenceException : Exception {
    init(message) = super.init(message)
}

class InvalidOperationException : Exception {
    init(message) = super.init(message)
}

class CallException : Exception {
    init(message) = super.init(message)
}

class OutOfBoundsException : Exception {
    init(message) = super.init(message)
}

class ConversionException : Exception {
    init(message) = super.init(message)
}

class IOException : Exception {
    init(message) = super.init(message)
}
