// ==== Intrinsics pt. 1 ==== //
// ======= Primitives ======= //

Obj      =  native("me.abje.lingua.interpreter.obj.Obj")
Boolean  =  native("me.abje.lingua.interpreter.obj.BooleanObj")
Char     =  native("me.abje.lingua.interpreter.obj.CharObj")
Class    =  native("me.abje.lingua.interpreter.obj.ClassObj")
Function =  native("me.abje.lingua.interpreter.obj.FunctionObj")
List     =  native("me.abje.lingua.interpreter.obj.ListObj")
Map      =  native("me.abje.lingua.interpreter.obj.MapObj")
Number   =  native("me.abje.lingua.interpreter.obj.NumberObj")
String   =  native("me.abje.lingua.interpreter.obj.StringObj")
Tuple    =  native("me.abje.lingua.interpreter.obj.TupleObj")

// ==== Intrinsics pt. 2 ==== //
// ======= Exceptions ======= //

class Exception {
    message

    init(message) =
        self.message = message

    printError() = {
        error(classOf(self) + ": " + self.message)
        dumpStack().map(x -> "  at " + x).forEach(error)
    }
}

class UndefinedException : Exception {
    init(message) = super.init(message)
}

class NullReferenceException : Exception {
    init(message) = super.init(message)
}

class InvalidOperationException : Exception {
    init(message) = super.init(message)
}

class CallException : Exception {
    init(message) = super.init(message)
}

class OutOfBoundsException : Exception {
    init(message) = super.init(message)
}

class ConversionException : Exception {
    init(message) = super.init(message)
}

class IOException : Exception {
    init(message) = super.init(message)
}
